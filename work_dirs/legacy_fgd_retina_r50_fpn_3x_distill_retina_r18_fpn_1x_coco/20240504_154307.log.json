{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-11.7\nNVCC: Cuda compilation tools, release 11.7, V11.7.64\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 1.10.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.1+cu113\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.26.0+", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/host/jp/data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/home/host/jp/data/coco/annotations/instances_train2017.json',\n        img_prefix='/home/host/jp/data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/home/host/jp/data/coco/annotations/instances_val2017.json',\n        img_prefix='/home/host/jp/data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/home/host/jp/data/coco/annotations/instances_val2017.json',\n        img_prefix='/home/host/jp/data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nfind_unused_parameters = True\ntemp = 0.5\nalpha_fgd = 0.01\nbeta_fgd = 1\ngamma_fgd = 1e-05\nlambda_fgd = 1\ndistiller = dict(\n    type='DetectionDistiller',\n    teacher_pretrained=\n    '/home/host/jp/mm-new/mmdetection/retinanet_r50_fpn_mstrain_3x_coco_20210718_220633-88476508.pth',\n    init_student=True,\n    distill_cfg=[\n        dict(\n            student_module='neck.fpn_convs.4.conv',\n            teacher_module='neck.fpn_convs.4.conv',\n            output_hook=True,\n            methods=[\n                dict(\n                    type='FeatureLoss',\n                    name='loss_fgd_fpn_4',\n                    student_channels=256,\n                    teacher_channels=256,\n                    temp=0.5,\n                    alpha_fgd=0.01,\n                    beta_fgd=1,\n                    gamma_fgd=1e-05,\n                    lambda_fgd=1)\n            ]),\n        dict(\n            student_module='neck.fpn_convs.3.conv',\n            teacher_module='neck.fpn_convs.3.conv',\n            output_hook=True,\n            methods=[\n                dict(\n                    type='FeatureLoss',\n                    name='loss_fgd_fpn_3',\n                    student_channels=256,\n                    teacher_channels=256,\n                    temp=0.5,\n                    alpha_fgd=0.01,\n                    beta_fgd=1,\n                    gamma_fgd=1e-05,\n                    lambda_fgd=1)\n            ]),\n        dict(\n            student_module='neck.fpn_convs.2.conv',\n            teacher_module='neck.fpn_convs.2.conv',\n            output_hook=True,\n            methods=[\n                dict(\n                    type='FeatureLoss',\n                    name='loss_fgd_fpn_2',\n                    student_channels=256,\n                    teacher_channels=256,\n                    temp=0.5,\n                    alpha_fgd=0.01,\n                    beta_fgd=1,\n                    gamma_fgd=1e-05,\n                    lambda_fgd=1)\n            ]),\n        dict(\n            student_module='neck.fpn_convs.1.conv',\n            teacher_module='neck.fpn_convs.1.conv',\n            output_hook=True,\n            methods=[\n                dict(\n                    type='FeatureLoss',\n                    name='loss_fgd_fpn_1',\n                    student_channels=256,\n                    teacher_channels=256,\n                    temp=0.5,\n                    alpha_fgd=0.01,\n                    beta_fgd=1,\n                    gamma_fgd=1e-05,\n                    lambda_fgd=1)\n            ]),\n        dict(\n            student_module='neck.fpn_convs.0.conv',\n            teacher_module='neck.fpn_convs.0.conv',\n            output_hook=True,\n            methods=[\n                dict(\n                    type='FeatureLoss',\n                    name='loss_fgd_fpn_0',\n                    student_channels=256,\n                    teacher_channels=256,\n                    temp=0.5,\n                    alpha_fgd=0.01,\n                    beta_fgd=1,\n                    gamma_fgd=1e-05,\n                    lambda_fgd=1)\n            ])\n    ])\nstudent_cfg = 'configs/retinanet/retinanet_r18_fpn_1x_coco.py'\nteacher_cfg = 'configs/retinanet/retinanet_r50_fpn_1x_coco.py'\nwork_dir = './work_dirs/fgd_retina_r50_fpn_3x_distill_retina_r18_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "fgd_retina_r50_fpn_3x_distill_retina_r18_fpn_1x_coco.py"}
